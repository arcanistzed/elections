// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "sqlite"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    refresh_token_expires_in Int?
    access_token             String? // @db.Text
    expires_at               Int?
    ext_expires_in           Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    updatedAt     DateTime  @updatedAt
    createdAt     DateTime  @default(now())
    Vote          Vote[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Election {
    id          String      @id @default(cuid())
    name        String
    description String?
    start       DateTime
    end         DateTime
    createdAt   DateTime    @default(now())
    updatedAt   DateTime    @updatedAt
    candidates  Candidate[]
    votes       Vote[]
}

model Candidate {
    id          String   @id @default(cuid())
    name        String
    description String?
    electionId  String
    election    Election @relation(fields: [electionId], references: [id], onDelete: Cascade)
    votes       Vote[]

    @@index([electionId])
}

model Vote {
    id          String    @id @default(cuid())
    electionId  String
    election    Election  @relation(fields: [electionId], references: [id], onDelete: Cascade)
    candidateId String
    candidate   Candidate @relation(fields: [candidateId], references: [id], onDelete: Cascade)
    voterId     String
    voter       User      @relation(fields: [voterId], references: [id], onDelete: Cascade)
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt

    @@index([electionId])
    @@index([candidateId])
    @@index([voterId])
}
